generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Landlord {
  landlord_id        String     @id @default(uuid())
  trust_score        Int        @default(0)
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  user_id            String     @unique
  address            String
  first_name         String
  last_name          String
  phone_number       String     @unique
  profile_picture_id String?
  profile_picture    Media?     @relation(fields: [profile_picture_id], references: [media_id])
  user               User       @relation(fields: [user_id], references: [user_name])
  Property           Property[]

  @@index([user_id], map: "landlord_user_id_fkey")
  @@index([profile_picture_id], map: "landlord_profile_picture_id_fkey")
  @@map("landlord")
}

model Student {
  student_id         String   @id @default(uuid())
  first_name         String
  last_name          String
  university         String
  email_verified     Boolean  @default(false)
  profile_picture_id String?
  student_id_number  String
  phone_number       String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user_id            String   @unique
  profile_picture    Media?   @relation(fields: [profile_picture_id], references: [media_id])
  user               User     @relation(fields: [user_id], references: [user_name])

  @@index([profile_picture_id], map: "student_profile_picture_id_fkey")
  @@map("student")
}

model User {
  created_at                                  DateTime       @default(now())
  updated_at                                  DateTime       @updatedAt
  email                                       String
  password                                    String
  user_name                                   String         @id
  user_type                                   UserType       @default(STUDENT)
  refresh_token                               String?        @db.Text
  Application                                 Application[]
  chat                                        chat[]
  conversation_conversation_receiver_idTouser conversation[] @relation("conversation_receiver_idTouser")
  conversation_conversation_sender_idTouser   conversation[] @relation("conversation_sender_idTouser")
  Landlord                                    Landlord?
  Student                                     Student?

  @@map("user")
}

model Property {
  property_id      String             @id @default(uuid())
  landlord_id      String
  address          String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  Listing          Listing[]
  landlord         Landlord           @relation(fields: [landlord_id], references: [landlord_id])
  property_amenity property_amenity[]

  @@index([landlord_id], map: "property_landlord_id_fkey")
  @@map("property")
}

model Listing {
  listing_id   String        @id @default(uuid())
  property_id  String
  title        String
  description  String
  status       String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  rent         Float
  room_type_id String?
  Application  Application[]
  property     Property      @relation(fields: [property_id], references: [property_id])
  room_type    room_type?    @relation(fields: [room_type_id], references: [room_type_id])

  @@index([property_id], map: "listing_property_id_fkey")
  @@index([room_type_id], map: "listing_room_type_id_fkey")
  @@map("listing")
}

model Media {
  media_id       String     @id @default(uuid())
  model_name     String
  model_id       String
  media_url      String
  media_type     String
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  identifier     String?
  media_category String
  Landlord       Landlord[]
  Student        Student[]

  @@map("media")
}

model Application {
  application_id     String            @id @default(uuid())
  listing_id         String
  student_id         String
  application_status ApplicationStatus @default(PENDING)
  applied_at         DateTime          @default(now())
  reviewed_at        DateTime?
  remarks            String?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  contact_number     String
  current_address    String
  full_name          String
  student_card_id    String
  listing            Listing           @relation(fields: [listing_id], references: [listing_id])
  user               User              @relation(fields: [student_id], references: [user_name])

  @@index([listing_id], map: "application_listing_id_fkey")
  @@index([student_id], map: "application_student_id_fkey")
  @@map("application")
}

model amenity {
  amenity_id       String             @id
  created_at       DateTime           @default(now())
  updated_at       DateTime
  amenity_name     String
  amenity_value    String
  property_amenity property_amenity[]
}

model chat {
  chat_id         String       @id
  sender_id       String
  message         String
  conversation_id String
  created_at      DateTime     @default(now())
  conversation    conversation @relation(fields: [conversation_id], references: [conversation_id])
  user            User         @relation(fields: [sender_id], references: [user_name])

  @@index([conversation_id], map: "chat_conversation_id_fkey")
  @@index([sender_id], map: "chat_sender_id_fkey")
}

model conversation {
  conversation_id                     String   @id
  sender_id                           String
  receiver_id                         String
  last_message                        String?
  created_at                          DateTime @default(now())
  updated_at                          DateTime
  chat                                chat[]
  user_conversation_receiver_idTouser User     @relation("conversation_receiver_idTouser", fields: [receiver_id], references: [user_name])
  user_conversation_sender_idTouser   User     @relation("conversation_sender_idTouser", fields: [sender_id], references: [user_name])

  @@index([receiver_id], map: "conversation_receiver_id_fkey")
  @@index([sender_id], map: "conversation_sender_id_fkey")
}

model property_amenity {
  property_amenity_id String   @id
  property_id         String
  amenity_id          String
  created_at          DateTime @default(now())
  updated_at          DateTime
  amenity             amenity  @relation(fields: [amenity_id], references: [amenity_id])
  property            Property @relation(fields: [property_id], references: [property_id])

  @@unique([property_id, amenity_id])
  @@index([amenity_id], map: "property_amenity_amenity_id_fkey")
}

model room_type {
  room_type_id   String    @id
  room_type_name String
  created_at     DateTime  @default(now())
  updated_at     DateTime
  listing        Listing[]
}

enum UserType {
  STUDENT
  LANDLORD
  ADMIN
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}
